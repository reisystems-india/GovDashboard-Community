<?php
/*
 * Copyright 2014 REI Systems, Inc.
 * 
 * This file is part of GovDashboard.
 * 
 * GovDashboard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GovDashboard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GovDashboard.  If not, see <http://www.gnu.org/licenses/>.
 */


function data_controller_script_dp_datasource() {
    $items[ScriptDataSource::TYPE] = array(
        'extensions' => array(
            'maximumEntityNameLength' => 'UnlimitedEntityNameLengthImpl'
        )
    );

    return $items;
}

function data_controller_script_dp_datasource_query() {
    $items[ScriptDataSource::TYPE] = array(
        'classname' => 'ScriptDataSourceHandler');

    return $items;
}

function data_controller_script_get_script_file_name(DatasetMetaData $dataset) {
    $filename = NULL;

    if (isset($dataset->source->scriptFile)) {
        if (!isset($dataset->loadedFromFile)) {
            throw new IllegalStateException(t(
                'Source file from which %datasetName dataset was loaded is unknown',
                array('%datasetName' => $dataset->publicName)));
        }

        // calculating script location
        $dir = dirname($dataset->loadedFromFile);
        $filename = $dir . $dataset->source->scriptFile;
    }

    return $filename;
}

function data_controller_script_prepare_version(DatasetMetaData $dataset, $scriptFileName) {
    $scriptVersion = NULL;
    if (isset($scriptFileName)) {
        $scriptVersion = filemtime($scriptFileName);
        if ($scriptVersion === FALSE) {
            $scriptVersion = NULL;
        }
    }

    return MathHelper::max($scriptVersion, $dataset->version);
}

function data_controller_script_load_dataset_script($datasetName) {
    $response = NULL;

    try {
        MetaModelFactory::getInstance()->registerAdHocMetaModelFilter(
            'DatasetMetaData', 'datasourceName', NameSpaceHelper::findNameSpace($datasetName));

        $metamodel = data_controller_get_metamodel();

        $dataset = $metamodel->getDataset($datasetName);

        $scriptBody = NULL;

        $scriptFileName = data_controller_script_get_script_file_name($dataset);
        if (isset($scriptFileName)) {
            $scriptBody = file_get_contents($scriptFileName);
            if ($scriptBody === FALSE) {
                LogHelper::log_error(t(
                    "Could not read content of '@datasetName' dataset script file: @filename",
                    array('@datasetName' => $dataset->publicName, '@filename' => $scriptFileName)));
                throw new IllegalStateException(t(
                    'Could not read content of script file for the dataset: %datasetName',
                    array('%datasetName' => $dataset->publicName)));
            }
        }
        elseif (isset($dataset->source->script)) {
            $scriptBody = $dataset->source->script;
        }
        else {
            throw new UnsupportedOperationException(t(
                'Could not access script body for the dataset: %datasetName',
                array('%datasetName' => $dataset->publicName)));
        }

        $response = $scriptBody;

        // preparing version number
        $selectedVersion = data_controller_script_prepare_version($dataset, $scriptFileName);
        if (isset($selectedVersion)) {
            drupal_add_http_header('ETag', $selectedVersion);
        }
    }
    catch (Exception $e) {
        LogHelper::log_error($e);
        services_error($e->getMessage(), 500);
    }

    return $response;
}
