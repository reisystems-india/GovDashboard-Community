<?php
/*
 * Copyright 2014 REI Systems, Inc.
 * 
 * This file is part of GovDashboard.
 * 
 * GovDashboard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GovDashboard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GovDashboard.  If not, see <http://www.gnu.org/licenses/>.
 */


function gd_password_policy_get_config() {
    return variable_get('gd_password_policy_config', array(
        'enabled_cron' => TRUE,
        'expiration' => array(
            'duration' => 180
        ),
        'rules' => array(
            'length' => 12,
            'upper' => 1,
            'lower' => 1,
            'number' => 1,
            'symbols' => 1,
            'unique' => 24,
        ),
    ));
}

function gd_password_policy_get_records($uid) {
    $records = db_select('gd_password_record', 'pp')
      ->fields('pp')
      ->condition('uid', $uid, '=')
      ->orderBy('created')
      ->execute()
      ->fetchAllAssoc('pid');
    return $records;
}

function gd_password_policy_menu() {
    $items = array();

    $items['admin/config/govdashboard/password'] = array(
        'title' => 'Password Policy Settings',
        'description' =>  'Configure global password policy settings.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gd_password_policy_admin_settings_form'),
        'file' => 'gd_password_policy.admin.inc',
        'access arguments' => array('administer site configuration')
    );

    return $items;
}

function gd_password_policy_init() {
    global $user;
    $var = variable_get('gd_password_block_' . $user->uid, FALSE);
    if ($var && $_GET['q'] !== "user/changePassword" && $_GET['q'] !== 'user/logout' && strpos($_GET['q'], 'reset')) {
        drupal_set_message('Your password has expired. Please change it.', 'warning');
        drupal_goto('user/changePassword');
    }
}

function gd_password_add_policy(&$form, &$form_state, $form_id) {
    $config = gd_password_policy_get_config();
    drupal_add_js(array(
        'password_policy' => array(
            'length' => $config['rules']['length'],
            'upper' => $config['rules']['upper'],
            'lower' => $config['rules']['lower'],
            'number' => $config['rules']['number'],
            'symbols' => $config['rules']['symbols'],
        )
    ), 'setting');
    drupal_add_js(drupal_get_path('module', 'gd_password_policy') . '/js/password_policy.js', array('weight' => 1));

    $form['#validate'][] = 'gd_password_policy_validate';
}

function gd_password_policy_form_alter(&$form, &$form_state, $form_id) {
    switch($form_id) {
        case 'user_profile_form':
        case 'gd_password_change_form':
            gd_password_add_policy($form, $form_state, $form_id);
            break;
    }
}

function gd_password_policy_validate($form, &$form_state) {
    $values = $form_state['values'];
    if (isset($form['#user'])) {
        $user = $form['#user'];
        $user = $user->uid;
    } else if (isset($form['#uid'])) {
        $user = $form['#uid'];
    }

    if (isset($user)) {
        if (!empty($values['pass'])) {
            $pass = $values['pass'];
            $config = gd_password_policy_get_config();
            $errors = array();

            preg_match_all('/[A-Z]/', $pass, $upper);
            preg_match_all('/[a-z]/', $pass, $lower);
            preg_match_all('/[0-9]/', $pass, $number);
            preg_match_all('/[\! \# \$ \% \- \_ \= \+ \< \>]/', $pass, $special);

            if (strlen($pass) < $config['rules']['length']) {
                $errors[] = 'Password must be at least ' . $config['rules']['length'] . ' characters long.';
            }

            if (count($upper[0]) < $config['rules']['upper']) {
                $errors[] = 'Password must have at least ' . $config['rules']['upper'] . ' upper case letters.';
            }

            if (count($lower[0]) < $config['rules']['lower']) {
                $errors[] = 'Password must have at least ' . $config['rules']['upper'] . ' lower case letters.';
            }

            if (count($number[0]) < $config['rules']['number']) {
                $errors[] = 'Password must have at least ' . $config['rules']['number'] . ' numeric (0-9) characters.';
            }

            if (count($special[0]) < $config['rules']['symbols']) {
                $errors[] = 'Password must have at least ' . $config['rules']['symbols'] . ' special characters: ! # $ % - _ = + < >';
            }

            require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
            $records = gd_password_policy_get_records($user);
            foreach($records as $record) {
                if (!empty($record->pass) ) {
                    $hash = _password_crypt('sha512', $pass, $record->pass);
                    if($hash == $record->pass) {
                        $errors[] = 'Your password is the same as one of the last ' . $config['rules']['unique'] . ' used.';
                        break;
                    }
                }
            }

            if (count($errors) > 0) {
                form_set_error('pass', t('Your password has not met the following requirement(s):') .'<ul><li>'. implode('</li><li>', $errors) .'</li></ul>');
            }
        }
    }
}

function gd_password_policy_user_login(&$edit, $account) {
    $var = variable_get('gd_password_block_' . $account->uid, NULL);
    if (!isset($var)) {
        $record = db_select('gd_password_block', 'pb')
          ->fields('pb')
          ->condition('uid', $account->uid, '=')
          ->execute()
          ->fetchAssoc();

        variable_set('gd_password_block_' . $account->uid, $record ? TRUE : FALSE);

        if ($record) {
            drupal_goto('user/changePassword');
        }
    }
}

function gd_password_policy_user_logout($account) {
    variable_del('gd_password_block_' . $account->uid);
}

function gd_password_policy_get_expiration_message() {
    return "You are receiving this notice because your GovDashboard account is no longer active.\nReason: Password Expired.\n\nYou will have to contact your site administrator to have your account reactivated.\n\nPlease feel free to contact us if you have any comments or concerns.\nThanks!";
}

function gd_password_policy_get_notice_message($days) {
    $link = GOVDASH_HOST . '/user/changePassword';
    return "You are receiving this notice because your GovDashboard password on " . GOVDASH_HOST . " will expire in " . $days . " days.\n\nFor uninterrupted access, you can set a new password using following link:\n". $link . "";
}

function gd_password_policy_get_reactivated_message($account) {
    $link = user_pass_reset_url($account);
    return "You are receiving this notice because your GovDashboard account on " . GOVDASH_HOST . "  has been reactivated after a password expiration.\n\nFor uninterrupted access, you can set a new password using following link:\n". $link;
}

function gd_password_policy_warn_user($user, $record = NULL, $num = 3) {
    $account = user_load($user);
    if ($account->uid == 1) return;

    //  If not supplied, pull the latest password record for the user
    if (!isset($record)) {
        $record = db_select('gd_password_record', 'pp')
          ->fields('pp')
          ->condition('uid', $account->uid, '=')
          ->orderBy('created', 'DESC')
          ->execute()
          ->fetchAssoc();
    }

    if ($record) {
        db_update('gd_password_record')
          ->fields(array(
            'warned' => $num
        ))
          ->condition('pid', $record['pid'], '=')
          ->execute();

        LogHelper::log_notice("UPDATED PASSWORD RECORD " . $record['pid']);
        gd_notification_send_notification($account->uid, GD_NOTIFICATION_NOTICE, 'Password Expiration Reminder', gd_password_policy_get_notice_message($num == 3 ? 14 : ($num == 2 ? 7 : 1)));
    } else {
        LogHelper::log_debug("PASSWORD RECORD NOT FOUND: USER " . $account->uid);
    }
}

function gd_password_policy_expire_user($user) {
    $account = user_load($user);
    if ($account->uid == 1) return;

    user_save($account, array(
        'status' => 0
    ), 'password_policy_expired');

    db_insert('gd_password_block')
      ->fields(array(
        'uid' => $account->uid
    ))
      ->execute();

    gd_notification_send_notification($account->uid, GD_NOTIFICATION_NOTICE, 'Password Expiration Notice', gd_password_policy_get_expiration_message());
}

function gd_password_policy_cron($u = NULL) {
    $config = gd_password_policy_get_config();
    if (!$config['enabled_cron']) return;

    $currentTime = time();
    $accounts = entity_load('user');
    foreach ($accounts as $account) {
        //  Newly created user, do not check for password expiration
        if (empty($account->pass) && $account->login == 0 && $account->access == 0 && $account->created && $account->status == 0) continue;

        //  User 1 is excluded from password expirations
        //  If user is passed in only that user is tested
        if ($account->uid == 1 || (isset($u) && $account->uid != $u)) continue;

        //  Pull the most recent password change for the user
        $record = db_select('gd_password_record', 'pp')
          ->fields('pp')
          ->condition('uid', $account->uid, '=')
          ->orderBy('created', 'DESC')
          ->execute()
          ->fetchAssoc();

        if ($record) {
            $expiration = $config['expiration']['duration'] * 86400;
            if ($record['created'] + $expiration <= $currentTime) {
                gd_password_policy_expire_user($account->uid);
            } else {
                //  14 days warning
                $countdown = 1209600;
                $num = null;
                if ($record['warned'] == 3) {
                    //  7 days warning
                    $countdown = 604800;
                    $num = 2;
                } else if ($record['warned'] == 2) {
                    //  1 day warning
                    $countdown = 86400;
                    $num = 1;
                }

                if ($record['created'] + $expiration - $countdown <= $currentTime) {
                    gd_password_policy_warn_user($account->uid, $record, $num);
                }
            }
        } else {
            LogHelper::log_debug("CRON PASSWORD RECORD NOT FOUND: USER " . $account->uid);
        }
    }
}

function gd_password_policy_user_insert(&$edit, $account, $category) {
    $result = db_insert('gd_password_record')
        ->fields(array(
        'uid' => $account->uid,
        'pass' => $account->pass,
        'created' => time()
    ))
        ->execute();

    LogHelper::log_notice("INSERT PASSWORD RECORD " . $result);
}

function gd_password_policy_user_update(&$edit, $account, $category) {
    if ($account->uid == 1) return;

    if (isset($edit['pass'])) {
        $config = gd_password_policy_get_config();
        $oldRecords = gd_password_policy_get_records($account->uid);
        if ($oldRecords && count($oldRecords) >= $config['rules']['unique']) {
            $count = count($oldRecords) - $config['rules']['unique'];
            foreach($oldRecords as $pid => $record) {
                db_delete('gd_password_record')
                  ->condition('pid', $pid, '=')
                  ->execute();

                LogHelper::log_notice("DELETED PASSWORD RECORD: " . $pid);
                if (--$count <= 0) {
                    break;
                }
            }
        }

        $result = db_insert('gd_password_record')
          ->fields(array(
            'uid' => $account->uid,
            'pass' => $account->pass,
            'created' => time()
        ))
          ->execute();

        LogHelper::log_notice("INSERT PASSWORD RECORD " . $result);
    } else if (isset($edit['status']) && $edit['status'] != $edit['original']->status && $edit['status'] == 1) {
        $record = db_select('gd_password_block', 'pb')
          ->fields('pb')
          ->condition('uid', $account->uid, '=')
          ->execute()
          ->fetchAssoc();
        if ($record) {
            gd_notification_send_notification($account->uid, GD_NOTIFICATION_NOTICE, 'Password Reset', gd_password_policy_get_reactivated_message($account));
            db_delete('gd_password_block')
              ->condition('uid', $account->uid, '=')
              ->execute();
        }
    }
}

function gd_password_policy_user_delete($account) {
    $results = db_delete('gd_password_record')
      ->condition('uid', $account->uid, '=')
      ->execute();

    db_delete('gd_password_block')
      ->condition('uid', $account->uid, '=')
      ->execute();

    LogHelper::log_debug("PASSWORDS DELETED (" . $account->uid . "): " . json_encode($results));
    LogHelper::log_notice("DELETED " . count($results) . " PASSWORDS FOR USER " . $account->uid);
}
