<?php
/*
 * Copyright 2014 REI Systems, Inc.
 * 
 * This file is part of GovDashboard.
 * 
 * GovDashboard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GovDashboard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GovDashboard.  If not, see <http://www.gnu.org/licenses/>.
 */


function gd_password_menu() {
    $items = array();

    $items['user/changePassword'] = array(
        'title' => 'Change Password',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gd_password_change_form'),
        'access arguments' => array('access user profile')
    );

    $items['gd/user/password-reset'] = array(
        'title' => 'Reset Password',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gd_password_reset_password_form'),
        'access callback' => true,
        'access arguments' => true
    );

    return $items;
}

function gd_password_change_form () {
    drupal_add_library('gd', 'bootstrap');
    global $user;
    $account = user_load($user->uid);
    drupal_add_js(drupal_get_path('module', 'gd_password') . '/js/password508.js', array('weight' => 1));
    $form['account']['current_pass'] = array(
        '#type' => 'password',
        '#title' => t('Current password'),
        '#attributes' => array('tabindex' => 2900),
        '#size' => 25,
        '#required' => true,
        //'#access' => !empty($protected_values),
        '#description' => 'Enter your current password',
        '#weight' => -5,
    );
    $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#required' => true,
        '#description' => t('To change the current user password, enter the new password in both fields.'),
        '#size' => 25,
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'user/profile', array('attributes' => array('id' => 'edit-clear', 'tabindex' => 3000))));
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit'), '#attributes' => array('tabindex' => 3000));

    $form['#uid'] = $user->uid;
    $form['_account'] = array('#type' => 'value', '#value' => $account);
    $form['#validate'] = array('gd_password_password_validate');
    $form['#submit'] = array('gd_password_password_submit');

    return $form;
}

function gd_password_reset_password_form () {

    global $user;
    $uid = arg(3);

    $pass_reset = isset($_SESSION['pass_reset']) && isset($_GET['pass-reset-token']) && $_GET['pass-reset-token'] == $_SESSION['pass_reset'];

    if ( $pass_reset && $user->uid ) {

        $account = user_load($user->uid);

        $form['account']['pass'] = array(
            '#type' => 'password_confirm',
            '#required' => true,
            '#description' => t('To change the current user password, enter the new password in both fields.'),
            '#size' => 25,
        );

        $form['actions'] = array('#type' => 'actions');
        $form['actions']['cancel'] = array('#markup' => l(t('Cancel'), 'user/profile', array('attributes' => array('id' => 'edit-clear'))));
        $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

        $form['#uid'] = $user->uid;
        $form['_account'] = array('#type' => 'value', '#value' => $account);

        $form['#validate'] = array();
        $form['#submit'] = array('gd_password_password_submit');

        return $form;

    } else if ( !$pass_reset && !empty($uid) && empty($_GET['pass-reset-token']) ) {

        $user = user_load($uid);
        $timestamp = time();
        watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $user->name, '%timestamp' => $timestamp));
        // log the user in to access password-reset form
        user_login_finalize();
        drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));

        // Let the user's password be changed without the current password check.
        $token = drupal_hash_base64(drupal_random_bytes(55));
        $_SESSION['pass_reset'] = $token;

        drupal_goto('gd/user/password-reset/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));

    } else {
        // assume malicious activity
        drupal_session_destroy_uid($uid);
        if ( isset($_SESSION['pass_reset']) ) {
            unset($_SESSION['pass_reset']);
        }
        drupal_goto('user/logout');
    }
}

// Password change form validation.
function gd_password_password_validate ( $form, &$form_state ) {
    $values = $form_state['values'];
    global $user;
    $account = user_load($user->uid);
    $current_pass = $values['current_pass'];
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $current_pass_failed = empty($current_pass) || !user_check_password($current_pass, $account);
    if ( $current_pass_failed ) {
        form_set_error('current_pass', t("Your current password is missing or incorrect."));
    }
    $pass = trim($values['pass']);
    if ( empty($pass) ) {
        form_set_error('pass', t('Your password cannot be empty.'));
    }
}

// Password change form submit.
function gd_password_password_submit ( $form, &$form_state ) {
    global $user;
    $account = $form['_account']['#value'];
    user_module_invoke('submit', $form_state['values'], $account, 'account');
    user_save($account, array('pass' => $form_state['values']['pass']));
    drupal_set_message(t('Password has been changed.'));

    if ( !empty($user->data['first_time']) ) {
        $form_state['redirect'] = array(gd_login_user_redirect(user_load($user->uid)));
    } else {
        $form_state['redirect'] = array('user/profile');
    }
}

function gd_password_form_user_pass_reset_form_alter ( &$form, &$form_state, $form_id ) {
    $uid = arg(2);
    $timestamp = arg(3);
    $hashed_pass = arg(4);
    $form['#action'] = url("gd/user/password-reset/$uid/$timestamp/$hashed_pass");
}

function gd_password_element_info_alter (&$type) {
    if ( isset($type['password_confirm']) ) {
        $type['password_confirm']['#process'][] = 'gd_password_process_password_confirm';
    }
}

function gd_password_process_password_confirm($element) {
    $element['pass1']['#attributes']['tabindex'] = 2901;
    $element['pass2']['#attributes']['tabindex'] = 2904;
    return $element;
}

function gd_password_form_user_pass_alter(&$form, &$form_state) {
    $form['name']['#attributes'] = array('tabindex' => 3000);
    $form['actions']['submit']['#attributes'] = array('tabindex' => 3000);
    $form['#submit'] = array('gd_password_forgot_password_submit');
}

function gd_password_forgot_password_submit($form, &$form_state) {
    $account = $form_state['values']['account'];
    if ($account->uid == 1) return;

    gd_notification_send_notification($account->uid, GD_NOTIFICATION_NOTICE, 'Password Reset', gd_password_get_reset_message($account));
    drupal_set_message('Further instructions have been sent to your e-mail address.');
    drupal_goto('user');
}

function gd_password_get_reset_message($account) {
    $link = user_pass_reset_url($account);
    return "You are receiving this notice because a password reset for " . GOVDASH_HOST . " has been requested. If this request comes from you, click here to reset your password and follow the instructions to access your account:\n\n" . $link . "\n\nIf you didn't initiate this request, please contact your site administrator immediately.";
}
