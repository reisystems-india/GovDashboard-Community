<?php
/*
 * Copyright 2014 REI Systems, Inc.
 * 
 * This file is part of GovDashboard.
 * 
 * GovDashboard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GovDashboard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GovDashboard.  If not, see <http://www.gnu.org/licenses/>.
 */


define('NODE_TYPE_COLUMN', 'column');


function gd_column_get_columns($loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    return execute_entity_query_4_node_type(NODE_TYPE_COLUMN, $loadNodes, $publishedOnly);
}

function gd_column_get_columns_4_dataset($dataset_nids, $loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    $query = prepare_entity_query_4_node_type(NODE_TYPE_COLUMN, $publishedOnly);
    $query->fieldCondition('field_column_dataset', 'nid', $dataset_nids);
    $entities = $query->execute();

    return process_entity_query_result($entities, $loadNodes);
}

function gd_column_node_view($node, $view_mode, $langcode) {
    if ($node->type == NODE_TYPE_DATASET) {
        $columns = gd_column_get_columns_4_dataset($node->nid, LOAD_ENTITY);

        $markup = '<div class="field field-name-field-dataset-columns field-type-node-reference field-label-above">
        	       <div class="field-label">Columns:</div>
        	       <div class="field-items">';

        $i = 1;
        foreach ($columns as $column) {
            $parity = ($i % 2) ? "odd" : "even";
            $markup .= '<div class="field-item ' . $parity . '"><a href="/node/' . $column->nid . '">' . $column->title . '</a></div>';
            $i++;
        }

        $markup .= '</div></div>';

        $node->content['columns'] = array(
            '#markup' => $markup,
            '#weight' => 20
        );
    }
}

function gd_column_prepare_column_format(ColumnType $type) {
    $format = NULL;

    if (isset($type->scale)) {
        $format = json_encode(array('scale' => $type->scale));
    }

    return $format;
}

function gd_column_create(ColumnMetaData $column, $dataset_nid) {
    $node = new StdClass();
    $node->type = NODE_TYPE_COLUMN;
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);

    $node->field_column_sysname[$node->language][0]['value'] = $column->name;
    $node->title = $column->publicName;

    $node->field_column_dataset[$node->language][0]['nid'] = $dataset_nid;
    $node->field_column_desc[$node->language][0]['value'] = $column->description;

    $node->field_column_datatype[$node->language][0]['value'] = $column->type->applicationType;
    $node->field_column_format[$node->language][0]['value'] = gd_column_prepare_column_format($column->type);

    $node->field_column_key[$node->language][0]['value'] = $column->isKey() ? 1 : 0;
    $node->field_column_persistence[$node->language][0]['value'] = $column->persistence;
    $node->field_column_index[$node->language][0]['value'] = $column->columnIndex;
    $node->field_column_source[$node->language][0]['value'] = $column->source;

    $node->status = $column->isUsed() ? NODE_PUBLISHED : NODE_NOT_PUBLISHED;

    node_save($node);

    $column->nid = $node->nid;

    return $node;
}

function gd_column_entity_delete($entity, $type) {
    if ($type == 'node') {
        if ($entity->type == 'dataset') {
            // remove attributes
            $column_nids = gd_column_get_columns_4_dataset($entity->nid, LOAD_ENTITY_ID_ONLY, INCLUDE_UNPUBLISHED);
            node_delete_multiple($column_nids);
        }
    }
}
