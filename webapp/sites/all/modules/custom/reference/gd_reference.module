<?php
/*
 * Copyright 2014 REI Systems, Inc.
 * 
 * This file is part of GovDashboard.
 * 
 * GovDashboard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GovDashboard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GovDashboard.  If not, see <http://www.gnu.org/licenses/>.
 */


define('NODE_TYPE_REFERENCE', 'reference');
define('NODE_TYPE_REFERENCE_POINT', 'reference_point');


/**
 * Implements hook_gd_sync_entities()
 *
 * @return array
 */
function gd_reference_gd_sync_entities () {

    $items['references'] = array(
        'export' => array(
            'class' => 'ReferenceExport',
            'weight' => -10
        ),
        'import' => array(
            'class' => 'ReferenceImport',
            'weight' => -10
        )
    );

    return $items;
}

/**
 * Implements hook_services_resources()
 *
 * @return array
 */
function gd_reference_services_resources () {
    $resource = array();
    require 'resources/reference.resource.inc';

    return $resource;
}

function gd_reference_get_references($loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    return execute_entity_query_4_node_type(NODE_TYPE_REFERENCE, $loadNodes, $publishedOnly);
}

function gd_reference_get_references_by_reference_points($reference_point_nids, $loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    if (empty($reference_point_nids)) {
        return array();
    }

    $query = prepare_entity_query_4_node_type(NODE_TYPE_REFERENCE, $publishedOnly);
    $query->fieldCondition('field_reference_point', 'nid', $reference_point_nids);
    $entities = $query->execute();

    return process_entity_query_result($entities, $loadNodes);
}

function gd_reference_get_reference_points($loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    return execute_entity_query_4_node_type(NODE_TYPE_REFERENCE_POINT, $loadNodes, $publishedOnly);
}

function gd_reference_get_reference_points_by_dataset($datasetNames, $loadNodes = LOAD_ENTITY_ID_ONLY, $publishedOnly = PUBLISHED_ONLY) {
    if (empty($datasetNames)) {
        return array();
    }

    $query = prepare_entity_query_4_node_type(NODE_TYPE_REFERENCE_POINT, $publishedOnly);
    $query->fieldCondition('field_ref_point_dataset_sysname', 'value', $datasetNames);
    $entities = $query->execute();

    return process_entity_query_result($entities, $loadNodes);
}
